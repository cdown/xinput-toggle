#!/bin/bash

is_enabled() {
    local id="${1?}"
    enabled=$(
        xinput list-props "$id" |
            grep '\bDevice Enabled\b' | sed 's/.*\(.\)$/\1/'
    )
    # xinput returns 0 for disabled and 1 for enabled, so we invert since we
    # pass on 0
    return "$(( !enabled ))"
}

should_disable() {
    local id="${1?}"
    local force_enable="${2?}"
    local force_disable="${3?}"

    if (( force_enable )) && (( force_disable )); then
        echo '-d and -e make no sense together' >&2
        exit 3
    fi

    if (( force_enable )); then
        return 1
    elif (( force_disable )); then
        return 0
    elif is_enabled "$id"; then
        return 0
    else
        return 1
    fi
}

show_help() {
    cat << EOF
Usage: ${0##*/} [-n]

Enable and disable Yubikeys.

    -d          disable only, do not toggle
    -e          enable only, do not toggle
    -h          show this help page
    -n          show results using notify-send in addition to stdout
EOF
}

notify=0
force_enable=0
force_disable=0

while getopts dehn opt; do
    case "$opt" in
        'd') force_disable=1 ;;
        'e') force_enable=1 ;;
        'n') notify=1 ;;
        'h')
            show_help
            exit 0
        ;;
        '?')
            show_help >&2
            exit 1
        ;;
    esac
done


mapfile -t yubikey_input_ids < <(
    xinput list | grep -i yubikey | sed 's/.*id=\([0-9]\+\).*/\1/'
)

if (( "${#yubikey_input_ids[@]}" == 0 )); then
    msg='No Yubikeys found, are they shown by xinput?'
    echo "$msg" >&2
    (( notify )) && notify-send "$msg"
    exit 2
fi

for id in "${yubikey_input_ids[@]}"; do
    if should_disable "$id" "$force_enable" "$force_disable"; then
        xinput -disable "$id"
        (( notify )) && notify-send "Disabled Yubikey with id $id"
    else
        xinput -enable "$id"
        (( notify )) && notify-send "Enabled Yubikey with id $id"
    fi
done
